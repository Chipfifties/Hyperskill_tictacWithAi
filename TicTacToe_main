package tictactoe;

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Main {
    protected static Random random = new Random();
    private static final PlayerFactory playerFactory = new PlayerFactory();
    private static Player playerOne;
    private static Player playerTwo;

    @SuppressWarnings("InfiniteLoopStatement")
    public static void main(String[] args) {

        do {
            Board game = new Board();
            mainMenu();
            game.printField();
            inGameLoop(game);
        } while (true);

    }

    // Main menu loop
    private static void mainMenu() {
        Scanner menuScanner = new Scanner(System.in);
        String menuRegex = "^(user|easy|medium|hard)";
        boolean isValidMenuChoice = false;

        do {
            System.out.print("Input command: ");
            String[] inputParams = menuScanner.nextLine().split("\\s+");

            if ("exit".equals(inputParams[0])) {
                System.exit(0);
            } else if (inputParams.length == 3 && inputParams[1].matches(menuRegex) &&
                    inputParams[2].matches(menuRegex)) {
                playerOne = playerFactory.getPlayer(inputParams[1]);
                playerTwo = playerFactory.getPlayer(inputParams[2]);
                isValidMenuChoice = true;
            } else {
                System.out.println("Bad parameters");
            }
        }
        while (!isValidMenuChoice);
    }

    private static void inGameLoop(Board game) {
        do {
            if (game.stepCounter % 2 != 0) {
                playerOne.makeStep(game.ticTacField, game, 'X');

            } else {
                playerTwo.makeStep(game.ticTacField, game, 'O');

            }
            if (game.xWon()) {
                game.printField();
                System.out.println("X wins");
            } else if (game.isDraw()) {
                game.printField();
                System.out.println("draw");
            } else if (game.oWon()) {
                game.printField();
                System.out.println("O wins");
            } else {
                game.printField();
            }
        } while (!game.isGameOver());
    }
}

interface Player {
    void makeStep(char[][] ticTacField, Board game, char ch);
}

class PlayerFactory {
    public Player getPlayer(String playerType) {
        switch (playerType) {
            case "user":
                return new User();
            case "easy":
                return new EasyAi();
            case "medium":
                return new MediumAi();
            case "hard":
                return new HardAi();
            default:
                return null;
        }
    }
}

class EasyAi implements Player {

    @Override
    public void makeStep(char[][] ticTacField, Board game, char ch) {
        boolean isValid = false;

        while (!isValid) {
            int x = Main.random.nextInt(3);
            int y = Main.random.nextInt(3);

            if (ticTacField[x][y] == ' ') {
                isValid = true;
                System.out.println("Making move level \"easy\"");
                game.makeAStep(x, y, ch);
            }
        }
    }
}

class MediumAi implements Player {

    @Override
    public void makeStep(char[][] ticTacField, Board game, char currentChar) {
        char oppChar = currentChar == 'X' ? 'O' : 'X';

        DuplicateCheck check = new DuplicateCheck(ticTacField);

        int[] coordsArray = check.duplicateCheck(oppChar);
        if (coordsArray == null) {
            coordsArray = check.duplicateCheck(currentChar);
        }

        System.out.println("Making move level \"medium\"");
        if (coordsArray != null) {
            int x = coordsArray[0];
            int y = coordsArray[1];
            game.makeAStep(x, y, currentChar);
        } else {
            boolean isValid = false;
            while (!isValid) {
                int x = Main.random.nextInt(3);
                int y = Main.random.nextInt(3);

                if (ticTacField[x][y] == ' ') {
                    isValid = true;
                    game.makeAStep(x, y, currentChar);
                }
            }
        }
    }
}

class HardAi implements Player {

    @Override
    public void makeStep(char[][] ticTacField, Board game, char ch) {
        char oppChar = ch == 'X' ? 'O' : 'X';
        int bestScore = Integer.MIN_VALUE;
        int[] move = new int[2];
        Board newGame = new Board(game);

        System.out.println("Making move level \"hard\"");

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (newGame.ticTacField[i][j] == ' ') {
                    newGame.makeAStep(i, j, ch);
                    int score = minimax(newGame, 0, false, ch);
                    newGame.ticTacField[i][j] = ' ';
                    if (score > bestScore) {
                        bestScore = score;
                        move = new int[]{i, j};
                    }
                }
            }
        }
        game.makeAStep(move[0], move[1], ch);
    }

    int minimax(Board newGame, int depth, boolean isMaximizing, char ch) {
        if (newGame.xWon()) {
            return 1;
        }
        if (newGame.oWon()) {
            return -1;
        }
        if (newGame.isDraw()) {
            return 0;
        }

        if (isMaximizing) {
            int bestScore = Integer.MIN_VALUE;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (newGame.ticTacField[i][j] == ' ') {
                        newGame.makeAStep(i, j, ch);
                        int score = minimax(newGame, depth + 1, false, ch);
                        newGame.ticTacField[i][j] = ' ';
                        if (score > bestScore) {
                            bestScore = score;

                        }
                    }
                }
            }
            return bestScore;
        } else {
            int bestScore = Integer.MAX_VALUE;
            char oppCh = 'O';
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (newGame.ticTacField[i][j] == ' ') {
                        newGame.makeAStep(i, j, oppCh);
                        int score = minimax(newGame, depth + 1, true, oppCh);
                        newGame.ticTacField[i][j] = ' ';
                        if (score < bestScore) {
                            bestScore = score;

                        }
                    }
                }
            }
            return bestScore;
        }
    }
}

@SuppressWarnings("unused")
class User implements Player {
    private final Scanner sc = new Scanner(System.in);

    @Override
    public void makeStep(char[][] ticTacField, Board game, char ch) {
        boolean success = false;
        while (!success) {
            System.out.print("Enter the coordinates: ");
            try {
                int x = sc.nextInt();
                int y = sc.nextInt();
                if (x < 1 || x > 3 || y < 1 || y > 3) {
                    System.out.println("Coordinates should be from 1 to 3!");
                } else {
                    int realX = 3 - y;
                    int realY = Math.abs(1 - x);
                    if (ticTacField[realX][realY] == ' ') {
                        game.makeAStep(realX, realY, ch);
                        success = true;
                    } else {
                        System.out.println("This cell is occupied! Choose another one!");
                    }
                }
            } catch (Exception e) {
                System.out.println("You should enter numbers!");
                String catchError = sc.nextLine();
            }
        }
    }
}

class DuplicateCheck {
    char[][] field;

    DuplicateCheck(char[][] ticTacField) {
        this.field = ticTacField;
    }

    protected int[] duplicateCheck(char currentChar) {
        for (int i = 0; i < 3; i++) {
            if (field[i][1] == currentChar && field[i][2] == currentChar && field[i][0] == ' ') {
                return new int[]{i, 0};
            } else if (field[i][0] == currentChar && field[i][2] == currentChar && field[i][1] == ' ') {
                return new int[]{i, 1};
            } else if (field[i][0] == currentChar && field[i][1] == currentChar && field[i][2] == ' ') {
                return new int[]{i, 2};
            } else if (field[0][i] == currentChar && field[1][i] == currentChar && field[2][i] == ' ') {
                return new int[]{2, i};
            } else if (field[0][i] == currentChar && field[2][i] == currentChar && field[1][i] == ' ') {
                return new int[]{1, i};
            } else if (field[1][i] == currentChar && field[2][i] == currentChar && field[0][i] == ' ') {
                return new int[]{0, i};
            }
        }

        if (field[1][1] == currentChar && field[2][2] == currentChar && field[0][0] == ' ') {
            return new int[]{0, 0};
        } else if (field[0][0] == currentChar && field[1][1] == currentChar && field[2][2] == ' ') {
            return new int[]{2, 2};
        } else if (field[0][0] == currentChar && field[2][2] == currentChar && field[1][1] == ' ') {
            return new int[]{1, 1};
        } else if (field[2][0] == currentChar && field[1][1] == currentChar && field[0][2] == ' ') {
            return new int[]{0, 2};
        } else if (field[1][1] == currentChar && field[0][2] == currentChar && field[2][0] == ' ') {
            return new int[]{2, 0};
        } else if (field[2][0] == currentChar && field[0][2] == currentChar && field[1][1] == ' ') {
            return new int[]{1, 1};
        }
        return null;
    }
}

class Board {
    boolean gameFinished;
    char[][] ticTacField;
    int stepCounter;
    int score;

    Board() {
        this.ticTacField = new char[3][3];
        this.gameFinished = false;
        this.stepCounter = 1;
        this.score = Integer.MIN_VALUE;
        // Fill initial field (array) with spaces
        for (char[] row : ticTacField) {
            Arrays.fill(row, ' ');
        }
    }

    Board(Board board) {
        char[][] newBoard = new char[3][3];
        newBoard = board.ticTacField.clone();
        this.ticTacField = newBoard;
    }

    // Printing game field
    protected void printField() {
        System.out.println("---------");
        for (int x = 0; x < 3; x++) {
            System.out.print("| ");
            for (int y = 0; y < 3; y++) {
                System.out.print(ticTacField[x][y] + " ");
            }
            System.out.println("|");
        }
        System.out.println("---------");
    }

    protected void makeAStep(int x, int y, char ch) {
        ticTacField[x][y] = ch;
        stepCounter++;
    }

    public boolean isGameOver() {
        return (xWon() || oWon() || isDraw());
    }

    public boolean xWon() {
        if (xWinCheck(ticTacField) && !oWinCheck(ticTacField)) {
            score = 1;
            return true;
        }
        return false;
    }

    public boolean oWon() {
        if (oWinCheck(ticTacField) && !xWinCheck(ticTacField)) {
            score = -1;
            return true;
        }
        return false;
    }

    public boolean isDraw() {
        int fieldCounter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (ticTacField[i][j] == 'X' || ticTacField[i][j] == 'O') {
                    fieldCounter++;
                }
            }
        }
        if (!xWinCheck(ticTacField) && !oWinCheck(ticTacField) && fieldCounter == 9) {
            score = 0;
            return true;
        }
        return false;
    }


    // Winning conditions check
    private static boolean xWinCheck(char[][] tic) {
        for (int i = 0; i < 3; i++) {
            if (tic[i][0] == 'X' && tic[i][1] == 'X' && tic[i][2] == 'X') {
                return true;
            } else if ((tic[0][i] == 'X' && tic[1][i] == 'X' && tic[2][i] == 'X')) {
                return true;
            }
        }
        if (tic[0][0] == 'X' && tic[1][1] == 'X' && tic[2][2] == 'X') {
            return true;
        } else return tic[0][2] == 'X' && tic[1][1] == 'X' && tic[2][0] == 'X';
    }

    private static boolean oWinCheck(char[][] tic) {
        for (int i = 0; i < 3; i++) {
            if (tic[i][0] == 'O' && tic[i][1] == 'O' && tic[i][2] == 'O') {
                return true;
            } else if ((tic[0][i] == 'O' && tic[1][i] == 'O' && tic[2][i] == 'O')) {
                return true;
            }
        }
        if (tic[0][0] == 'O' && tic[1][1] == 'O' && tic[2][2] == 'O') {
            return true;
        } else return (tic[0][2] == 'O' && tic[1][1] == 'O' && tic[2][0] == 'O');
    }
}

